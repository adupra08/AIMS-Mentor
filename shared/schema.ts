import {
  pgTable,
  text,
  varchar,
  timestamp,
  jsonb,
  index,
  integer,
  boolean,
  serial,
  decimal,
} from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
import { relations } from "drizzle-orm";

// Session storage table for Replit Auth
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table for Replit Auth
export const users = pgTable("users", {
  id: varchar("id").primaryKey().notNull(),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  profileImageUrl: varchar("profile_image_url"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Student profiles with comprehensive academic data
export const studentProfiles = pgTable("student_profiles", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  currentGrade: integer("current_grade").notNull(),
  currentGpa: decimal("current_gpa", { precision: 3, scale: 2 }),
  currentSubjects: text("current_subjects").array().default([]),
  interestedSubjects: text("interested_subjects").array().default([]),
  dreamColleges: text("dream_colleges").array().default([]),
  academicInterests: text("academic_interests").array().default([]),
  careerGoals: text("career_goals"),
  extracurricularActivities: text("extracurricular_activities").array().default([]),
  completedAPs: text("completed_aps").array().default([]),
  plannedAPs: text("planned_aps").array().default([]),
  testScores: jsonb("test_scores").$type<{sat?: number, act?: number, psat?: number}>().default({}),
  location: varchar("location"),
  schoolDistrict: varchar("school_district"),
  isOnboardingComplete: boolean("is_onboarding_complete").default(false),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Academic pathways generated by AI
export const academicPathways = pgTable("academic_pathways", {
  id: serial("id").primaryKey(),
  studentId: integer("student_id").notNull().references(() => studentProfiles.id),
  pathwayData: jsonb("pathway_data").$type<{
    grade9: any[];
    grade10: any[];
    grade11: any[];
    grade12: any[];
  }>().notNull(),
  targetCollege: varchar("target_college").notNull(),
  overallProgress: decimal("overall_progress", { precision: 5, scale: 2 }).default("0"),
  lastUpdated: timestamp("last_updated").defaultNow(),
  createdAt: timestamp("created_at").defaultNow(),
});

// Opportunities database
export const opportunities = pgTable("opportunities", {
  id: serial("id").primaryKey(),
  title: varchar("title").notNull(),
  description: text("description").notNull(),
  category: varchar("category").notNull(), // competition, internship, volunteer, etc.
  eligibleGrades: jsonb("eligible_grades").$type<number[]>().default([]),
  subjects: jsonb("subjects").$type<string[]>().default([]),
  deadline: timestamp("deadline"),
  applicationUrl: varchar("application_url"),
  isTeamBased: boolean("is_team_based").default(false),
  location: varchar("location"),
  isPaid: boolean("is_paid").default(false),
  difficultyLevel: varchar("difficulty_level"), // beginner, intermediate, advanced
  tags: jsonb("tags").$type<string[]>().default([]),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Student bookmarked opportunities
export const studentOpportunities = pgTable("student_opportunities", {
  id: serial("id").primaryKey(),
  studentId: integer("student_id").notNull().references(() => studentProfiles.id),
  opportunityId: integer("opportunity_id").notNull().references(() => opportunities.id),
  status: varchar("status").default("bookmarked"), // bookmarked, applied, completed
  notes: text("notes"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Student todos and tasks
export const todos = pgTable("todos", {
  id: serial("id").primaryKey(),
  studentId: integer("student_id").notNull().references(() => studentProfiles.id),
  title: varchar("title").notNull(),
  description: text("description"),
  dueDate: timestamp("due_date"),
  priority: varchar("priority").default("medium"), // low, medium, high
  category: varchar("category"), // study, application, extracurricular, etc.
  isCompleted: boolean("is_completed").default(false),
  completedAt: timestamp("completed_at"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Chat messages for AI mentor
export const chatMessages = pgTable("chat_messages", {
  id: serial("id").primaryKey(),
  studentId: integer("student_id").notNull().references(() => studentProfiles.id),
  message: text("message").notNull(),
  sender: varchar("sender").notNull(), // user, ai
  response: text("response"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Progress tracking
export const progressTracking = pgTable("progress_tracking", {
  id: serial("id").primaryKey(),
  studentId: integer("student_id").notNull().references(() => studentProfiles.id),
  category: varchar("category").notNull(), // academic, extracurricular, test_prep, overall
  score: decimal("score", { precision: 5, scale: 2 }).notNull(),
  details: jsonb("details").default({}),
  recordedAt: timestamp("recorded_at").defaultNow(),
});

// Relations
export const studentProfileRelations = relations(studentProfiles, ({ one, many }) => ({
  user: one(users, {
    fields: [studentProfiles.userId],
    references: [users.id],
  }),
  pathways: many(academicPathways),
  opportunities: many(studentOpportunities),
  todos: many(todos),
  chatMessages: many(chatMessages),
  progressRecords: many(progressTracking),
}));

export const academicPathwayRelations = relations(academicPathways, ({ one }) => ({
  student: one(studentProfiles, {
    fields: [academicPathways.studentId],
    references: [studentProfiles.id],
  }),
}));

export const opportunityRelations = relations(opportunities, ({ many }) => ({
  studentOpportunities: many(studentOpportunities),
}));

export const studentOpportunityRelations = relations(studentOpportunities, ({ one }) => ({
  student: one(studentProfiles, {
    fields: [studentOpportunities.studentId],
    references: [studentProfiles.id],
  }),
  opportunity: one(opportunities, {
    fields: [studentOpportunities.opportunityId],
    references: [opportunities.id],
  }),
}));

export const todoRelations = relations(todos, ({ one }) => ({
  student: one(studentProfiles, {
    fields: [todos.studentId],
    references: [studentProfiles.id],
  }),
}));

export const chatMessageRelations = relations(chatMessages, ({ one }) => ({
  student: one(studentProfiles, {
    fields: [chatMessages.studentId],
    references: [studentProfiles.id],
  }),
}));

export const progressTrackingRelations = relations(progressTracking, ({ one }) => ({
  student: one(studentProfiles, {
    fields: [progressTracking.studentId],
    references: [studentProfiles.id],
  }),
}));

// Schema types
export type UpsertUser = typeof users.$inferInsert;
export type User = typeof users.$inferSelect;

export type InsertStudentProfile = typeof studentProfiles.$inferInsert;
export type StudentProfile = typeof studentProfiles.$inferSelect;

export type InsertAcademicPathway = typeof academicPathways.$inferInsert;
export type AcademicPathway = typeof academicPathways.$inferSelect;

export type InsertOpportunity = typeof opportunities.$inferInsert;
export type Opportunity = typeof opportunities.$inferSelect;

export type InsertStudentOpportunity = typeof studentOpportunities.$inferInsert;
export type StudentOpportunity = typeof studentOpportunities.$inferSelect;

export type InsertTodo = typeof todos.$inferInsert;
export type Todo = typeof todos.$inferSelect;

export type InsertChatMessage = typeof chatMessages.$inferInsert;
export type ChatMessage = typeof chatMessages.$inferSelect;

export type InsertProgressTracking = typeof progressTracking.$inferInsert;
export type ProgressTracking = typeof progressTracking.$inferSelect;

// Zod schemas for validation
export const insertStudentProfileSchema = createInsertSchema(studentProfiles).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertTodoSchema = createInsertSchema(todos).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  completedAt: true,
});

export const insertChatMessageSchema = createInsertSchema(chatMessages).omit({
  id: true,
  createdAt: true,
});
